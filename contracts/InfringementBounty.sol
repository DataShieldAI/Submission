// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "./LinkRegistry.sol";

/// @title InfringementBounty
/// @notice Rewards users for reporting new infringing links
contract InfringementBounty {
    LinkRegistry public registry;
    address public owner;

    mapping(address => uint256) public rewards;

    event BountyPaid(address indexed reporter, string url, uint256 amount);

    constructor(address registryAddr) {
        registry = LinkRegistry(registryAddr);
        owner = msg.sender;
    }

    function reportInfringement(
        string calldata url,
        string calldata licenseCID,
        string calldata dmcaCID
    ) external {
        // Use the autogenerated getter properly â€” unpack just the `exists` field.
        (, , , , , bool exists) = registry.linkRecords(url);
        require(!exists, "Link already registered");

        // Add to registry & mark DMCA
        registry.addLink(url, licenseCID);
        registry.fileDMCA(url, dmcaCID);

        // Pay reporter
        uint256 bounty = 1 ether; // example amount, adjust
        rewards[msg.sender] += bounty;

        emit BountyPaid(msg.sender, url, bounty);
    }

    function withdraw() external {
        uint256 amount = rewards[msg.sender];
        require(amount > 0, "No rewards");
        rewards[msg.sender] = 0;
        payable(msg.sender).transfer(amount);
    }

    receive() external payable {}
}
